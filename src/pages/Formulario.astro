---
import sendGrid from '@sendgrid/mail';

sendGrid.setApiKey(import.meta.env.SENDGRID_API_KEY);

interface FormValues {
  first_name: FormDataEntryValue | null;
  last_name: FormDataEntryValue | null;
  email: FormDataEntryValue | null;
  phone: FormDataEntryValue | null;
  company: FormDataEntryValue | null;
}

const validateFormData = (data: FormData) => {
  const formValues: FormValues = {
    first_name: data.get('first_name'),
    last_name: data.get('last_name'),
    email: data.get('email'),
    phone: data.get('phone'),
    company: data.get('company'),
  };

  // Validar los datos del formulario
  // Agregar validaciones adicionales según sea necesario
  return !formValues.first_name || !formValues.last_name || !formValues.email || !formValues.phone || !formValues.company;
};

const sendEmail = async (formData: FormData) => {
  try {
    const formValues: FormValues = {
      first_name: formData.get('first_name'),
      last_name: formData.get('last_name'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      company: formData.get('company'),
    };

    const name = `${formValues.first_name?.toString()} ${formValues.last_name?.toString()}`;
    const msg = {
      to: 'manuel@duppa.co', // Cambiar al destinatario
      from: 'bienvenido@duppa.co', // Cambiar al remitente verificado
      replyTo: { email: formValues.email?.toString() || '', name: name },
      subject: `Envío del formulario de contacto de ${name}`,
      text: `Teléfono: ${formValues.phone?.toString()}\nCompañía: ${formValues.company?.toString()}`,
    };

    await sendGrid.send(msg);
    console.log('Correo enviado');
  } catch (error) {
    console.error(error);
    // Manejar el error de envío de correo electrónico
  }
};

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();

  if (validateFormData(formData)) {
    // Enviar una respuesta de error al cliente
    return new Response(JSON.stringify({ error: 'All form fields are required.' }), { status: 400 });
  }

  await sendEmail(formData);

  // Enviar una respuesta de éxito al cliente
  return new Response(JSON.stringify({ message: 'Form submitted successfully' }), { status: 200 });
}


const inputClasses = `
block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent
border-0 border-b-2 border-gray-300 appearance-none
dark:text-white dark:border-gray-600 dark:focus:border-blue-500
focus:outline-none focus:ring-0 focus:border-blue-600 peer
`;

const labelClasses = `
peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400
duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0]
peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:left-auto
peer-focus:text-blue-600 peer-focus:dark:text-blue-500
peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0
peer-focus:scale-75 peer-focus:-translate-y-6
`;
---
  

<form id="contactForm" class="relative z-0 w-full mb-5 group" method="POST" action="/api/sendmail">
<div class="grid md:grid-cols-2 md:gap-6">
<div class="relative z-0 w-full mb-5 group">
<input type="text" name="first_name" id="first_name" class={inputClasses} placeholder=" " required />
<label for="first_name" class={labelClasses}>Nombre</label>
</div>
<div class="relative z-0 w-full mb-5 group">
<input type="text" name="last_name" id="last_name" class={inputClasses} placeholder=" " required />
<label for="last_name" class={labelClasses}>Apellido</label>
</div>
</div>
<div class="relative z-0 w-full mb-5 group">
<input type="email" name="email" id="email" class={inputClasses} placeholder=" " required />
<label for="email" class={labelClasses}>Correo Electrónico</label>
</div>
<div class="grid md:grid-cols-2 md:gap-6">
<div class="relative z-0 w-full mb-5 group">
<input type="tel" pattern="[0-9]{10}" name="phone" id="phone" class={inputClasses} placeholder=" " required />
<label for="phone" class={labelClasses}>Número de teléfono</label>
</div>
<div class="relative z-0 w-full mb-5 group">
<input type="text" name="company" id="company" class={inputClasses} placeholder=" " required />
<label for="company" class={labelClasses}>Compañía</label>
</div>
</div>
<button
type="submit"
class="
text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
>
Enviar
</button>
<p id="formMessage" class="mt-4 p-2"></p>
</form>

<script>
document.getElementById('contactForm')?.addEventListener('submit', async (event) => {
event.preventDefault();
const form = event.target as HTMLFormElement;
const formData = new FormData(form);
const messageElement = document.getElementById('formMessage');

if (!messageElement) {
console.error('Elemento formMessage no encontrado');
return;
}

messageElement.textContent = 'Enviando formulario...';
messageElement.className = 'mt-4 p-2 bg-yellow-100 text-yellow-800';

try {
const response = await fetch(form.action || window.location.href, {
method: 'POST',
body: formData,
});

const result = await response.json();

if (response.ok) {
messageElement.textContent = result.message;
messageElement.className = 'mt-4 p-2 bg-green-100 text-green-800';
form.reset();
} else {
messageElement.textContent = result.error || 'Error al enviar el formulario';
messageElement.className = 'mt-4 p-2 bg-red-100 text-red-800';
}
} catch (error) {
console.error('Error:', error);
messageElement.textContent = 'Error de red. Por favor, intente más tarde.';
messageElement.className = 'mt-4 p-2 bg-red-100 text-red-800';
}
});
</script>


